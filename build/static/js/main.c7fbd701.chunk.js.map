{"version":3,"sources":["Data.js","Components/search.js","GeojsonDB.js","script.js","assets/icons/index.js","App.js","serviceWorker.js","index.js"],"names":["stations","useStyles","makeStyles","loading","color","FormControl","margin","width","height","Focused","backgroundColor","root","background","borderRadius","selected","Search","findstation","area","match","classes","style","position","top","left","minWidth","zIndex","display","justifyContent","variant","className","InputLabel","id","Select","labelId","value","onClick","e","fullWidth","MenuItem","map","i","key","Name","textAlign","toUpperCase","alignItems","CircularProgress","GeojsonData","filterGeojson","geojsonData","features","filter","y","properties","filterStations","station","Icon","size","type","cursor","viewBox","xmlns","fill","d","App","useState","setArea","setMatch","setLoading","geojson","setGeojson","latitude","longitude","zoom","viewport","setViewport","target","console","log","setTimeout","X","Y","mapboxApiAccessToken","mapStyle","onViewportChange","data","source","paint","clickedStation","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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AAQ,UACR,WAAc,CACZ,KAAQ,aAEV,SAAY,CACV,KAAQ,UACR,YAAe,CACb,CACE,CACE,mBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,kBAEF,CACE,kBACA,mBAEF,CACE,mBACA,uBAMV,CACE,KAAQ,UACR,WAAc,CACZ,KAAQ,aAEV,SAAY,CACV,KAAQ,UACR,YAAe,CACb,CACE,CACE,kBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,kBACA,kBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,kBACA,mBAEF,CACE,kBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,iBAEF,CACE,mBACA,oBAEF,CACE,mBACA,oBAEF,CACE,mBACA,mBAEF,CACE,kBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,mBAEF,CACE,kBACA,mBAEF,CACE,mBACA,oBAEF,CACE,mBACA,mBAEF,CACE,kBACA,mBAEF,CACE,kBACA,kBAEF,CACE,mBACA,oBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,mBACA,mBAEF,CACE,kBACA,mBAEF,CACE,kBACA,mBAEF,CACE,kBACA,oBAEF,CACE,mBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,mBACA,oBAEF,CACE,kBACA,mBAEF,CACE,kBACA,uBAMV,CACE,KAAQ,UACR,WAAc,CACZ,KAAQ,eAEV,SAAY,CACV,KAAQ,UACR,YAAe,CACb,CACE,CACE,kBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,kBACA,oBAEF,CACE,kBACA,mBAEF,CACE,mBACA,iBAEF,CACE,kBACA,uBAMV,CACE,KAAQ,UACR,WAAc,CACZ,KAAQ,eAEV,SAAY,CACV,KAAQ,UACR,YAAe,CACb,CACE,CACE,mBACA,mBAEF,CACE,mBACA,mBAEF,CACE,mBACA,oBAEF,CACE,mBACA,mBAEF,CACE,kBACA,oBAEF,CACE,mBACA,mBAEF,CACE,mBACA,uBAMV,CACE,KAA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","file":"static/js/main.c7fbd701.chunk.js","sourcesContent":["export const stations = [\n  {\n    \"Name\": \"Liljeholmen\",\n    \"X\": 18.02481,\n    \"Y\": 59.310665\n  },\n  {\n    \"Name\": \"Slussen\",\n    \"X\": 18.07186,\n    \"Y\": 59.320284\n  },\n  {\n    \"Name\": \"Hornstull\",\n    \"X\": 18.034231,\n    \"Y\": 59.315537\n  },\n  {\n    \"Name\": \"Mariatorget\",\n    \"X\": 18.06261,\n    \"Y\": 59.318827\n  },\n  {\n    \"Name\": \"Zinkensdamm\",\n    \"X\": 18.050277,\n    \"Y\": 59.317578\n  },\n  {\n    \"Name\": \"Gamla stan\",\n    \"X\": 18.068192,\n    \"Y\": 59.323016\n  },\n  {\n    \"Name\": \"Östermalmstorg\",\n    \"X\": 18.080049,\n    \"Y\": 59.336365\n  },\n  {\n    \"Name\": \"Karlaplan\",\n    \"X\": 18.092094,\n    \"Y\": 59.339071\n  },\n  {\n    \"Name\": \"Gärdet\",\n    \"X\": 18.102279,\n    \"Y\": 59.348087\n  },\n  {\n    \"Name\": \"Stadion\",\n    \"X\": 18.081532,\n    \"Y\": 59.340518\n  },\n  {\n    \"Name\": \"Tekniska högskolan\",\n    \"X\": 18.071707,\n    \"Y\": 59.345543\n  },\n  {\n    \"Name\": \"Universitetet\",\n    \"X\": 18.0538,\n    \"Y\": 59.365365\n  }\n]\n","import React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { stations } from \"../Data\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles({\n  loading: {\n    color: \"#156258\"\n  },\n  FormControl: {\n    margin: \"30px 0 0 0\",\n    width: \"80%\",\n    height: \"auto\",\n    Focused: { backgroundColor: \"white\" }\n  },\n  root: {\n    background: \"white\",\n    borderRadius: \"4px\"\n  },\n  selected: {\n    backgroundColor: \"green\"\n  }\n});\n\nconst Search = ({ findstation, area, match, loading }) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n        backgroundColor: \"#152946\",\n        width: \"25%\",\n        margin: \"20px\",\n        height: \"60%\",\n        borderRadius: \"10px\",\n        minWidth: \"400px\",\n        zIndex: \"999\"\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <FormControl variant=\"filled\" className={classes.FormControl}>\n          <InputLabel id=\"demo-simple-select-outlined-label\">\n            Välj område\n          </InputLabel>\n          <Select\n            className={classes.root}\n            labelId=\"demo-simple-select-outlined-label\"\n            id=\"demo-simple-select-outlined\"\n            value={area}\n            onClick={e => findstation(e)}\n            fullWidth={true}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            {stations.map(i => {\n              return (\n                <MenuItem key={i.Name} value={i.Name}>\n                  <em>{i.Name}</em>\n                </MenuItem>\n              );\n            })}\n            <MenuItem value={\"Liljeholmen\"}>Liljeholmen</MenuItem>\n            <MenuItem value={\"Slussen\"}>Slussen</MenuItem>\n            <MenuItem value={\"Karlaplan\"}>Karlaplan</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n      {match && (\n        <h2 style={{ color: \"#7fe2bd\", textAlign: \"center\" }}>\n          {match.Name.toUpperCase()}\n        </h2>\n      )}\n\n      {loading && (\n        <div\n          style={{\n            width: \"100%\",\n            height: \"75%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <CircularProgress\n            className={classes.loading}\n            variant=\"indeterminate\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","\n\nconst GeojsonData = [\n  {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Liljeholmen\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.026493787765496,\n                59.31459532302553\n              ],\n              [\n                18.023983240127563,\n                59.31513188653864\n              ],\n              [\n                18.02136540412902,\n                59.31560821643961\n              ],\n              [\n                18.019798994064324,\n                59.31583816641714\n              ],\n              [\n                18.018318414688103,\n                59.31587101628694\n              ],\n              [\n                18.010550737380978,\n                59.31262967619607\n              ],\n              [\n                18.008748292922967,\n                59.311709780151915\n              ],\n              [\n                18.00870537757873,\n                59.31048321338095\n              ],\n              [\n                18.014799356460564,\n                59.30675943608884\n              ],\n              [\n                18.02166581153869,\n                59.30351722737051\n              ],\n              [\n                18.033381700515747,\n                59.302706626899884\n              ],\n              [\n                18.03715825080871,\n                59.305992725442266\n              ],\n              [\n                18.0338966846466,\n                59.30667181288972\n              ],\n              [\n                18.031793832778924,\n                59.30739469753119\n              ],\n              [\n                18.029916286468506,\n                59.30806280452186\n              ],\n              [\n                18.0305814743042,\n                59.3085063765036\n              ],\n              [\n                18.030881881713867,\n                59.30897184705349\n              ],\n              [\n                18.031965494155877,\n                59.31037369633919\n              ],\n              [\n                18.03253412246704,\n                59.311123881008314\n              ],\n              [\n                18.03301692008972,\n                59.31172073144168\n              ],\n              [\n                18.03106427192688,\n                59.3129636799108\n              ],\n              [\n                18.02895069122314,\n                59.31407517684315\n              ],\n              [\n                18.026493787765496,\n                59.31459532302553\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Slussen\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.072059154510516,\n                59.321181327907695\n              ],\n              [\n                18.070600032806407,\n                59.32144408467515\n              ],\n              [\n                18.069312572479248,\n                59.32118132790772\n              ],\n              [\n                18.068668842315674,\n                59.3210718453218\n              ],\n              [\n                18.067510128021237,\n                59.321060897043814\n              ],\n              [\n                18.065643310546875,\n                59.32118132790772\n              ],\n              [\n                18.06429147720337,\n                59.32122512084335\n              ],\n              [\n                18.066662549972534,\n                59.3165663310855\n              ],\n              [\n                18.071876764297485,\n                59.3172397326498\n              ],\n              [\n                18.07720899581909,\n                59.31790764622838\n              ],\n              [\n                18.07639360427858,\n                59.3198018215544\n              ],\n              [\n                18.073647022247325,\n                59.32061201461015\n              ],\n              [\n                18.072059154510516,\n                59.321181327907695\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Karlaplan\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.089933395385742,\n                59.34235957336102\n              ],\n              [\n                18.084654808044434,\n                59.33626465622256\n              ],\n              [\n                18.099353313446045,\n                59.3333535917908\n              ],\n              [\n                18.10424566268921,\n                59.33964599307832\n              ],\n              [\n                18.089933395385742,\n                59.34235957336102\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Hornstull\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.01622629165651,\n                59.32190390413078\n              ],\n              [\n                18.016269207000743,\n                59.32147692912827\n              ],\n              [\n                18.015239238739028,\n                59.321312706545356\n              ],\n              [\n                18.01485300064088,\n                59.3209952073018\n              ],\n              [\n                18.015260696411147,\n                59.31857554668464\n              ],\n              [\n                18.015089035034194,\n                59.318268971055296\n              ],\n              [\n                18.01618337631227,\n                59.31762296335685\n              ],\n              [\n                18.01747083663942,\n                59.31713023736856\n              ],\n              [\n                18.019723892211925,\n                59.31690029613013\n              ],\n              [\n                18.022320270538344,\n                59.316823648705\n              ],\n              [\n                18.026289939880385,\n                59.316834598347775\n              ],\n              [\n                18.026590347290053,\n                59.316057164949754\n              ],\n              [\n                18.030774593353286,\n                59.31487455611455\n              ],\n              [\n                18.03401470184328,\n                59.31376856062886\n              ],\n              [\n                18.035967350006118,\n                59.31307866403706\n              ],\n              [\n                18.037598133087172,\n                59.31224638920204\n              ],\n              [\n                18.04251194000246,\n                59.31284869539575\n              ],\n              [\n                18.038735389709487,\n                59.321739683610694\n              ],\n              [\n                18.038220405578624,\n                59.32206812385743\n              ],\n              [\n                18.03791999816896,\n                59.32199148808373\n              ],\n              [\n                18.03719043731691,\n                59.3222542385885\n              ],\n              [\n                18.037018775939956,\n                59.322473195790906\n              ],\n              [\n                18.035967350006118,\n                59.32273594257193\n              ],\n              [\n                18.034701347351092,\n                59.322998687321856\n              ],\n              [\n                18.034465312957778,\n                59.32277973350463\n              ],\n              [\n                18.03143978118898,\n                59.32292205364629\n              ],\n              [\n                18.02729845046999,\n                59.32316290175917\n              ],\n              [\n                18.02549600601198,\n                59.322933001324785\n              ],\n              [\n                18.024423122406024,\n                59.32248414361398\n              ],\n              [\n                18.024337291717547,\n                59.32201338403671\n              ],\n              [\n                18.023607730865493,\n                59.321914852137226\n              ],\n              [\n                18.022813796997085,\n                59.322122863589975\n              ],\n              [\n                18.01948785781862,\n                59.32258267386316\n              ],\n              [\n                18.01622629165651,\n                59.32190390413078\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Zinkensdamm\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.03976535797119,\n                59.32043683936949\n              ],\n              [\n                18.042640686035156,\n                59.31283774446925\n              ],\n              [\n                18.037726879119873,\n                59.31218068242637\n              ],\n              [\n                18.046610355377197,\n                59.309147081374505\n              ],\n              [\n                18.05856227874756,\n                59.310811762389974\n              ],\n              [\n                18.05354118347168,\n                59.32132365474223\n              ],\n              [\n                18.050494194030758,\n                59.321290810141\n              ],\n              [\n                18.03976535797119,\n                59.32043683936949\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Mariatorget\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.053627014160156,\n                59.32130175834495\n              ],\n              [\n                18.058583736419678,\n                59.31075700444223\n              ],\n              [\n                18.047039508819577,\n                59.309125177133765\n              ],\n              [\n                18.058304786682125,\n                59.30674848320128\n              ],\n              [\n                18.07102918624878,\n                59.307679466050175\n              ],\n              [\n                18.064055442810055,\n                59.32125796550804\n              ],\n              [\n                18.053627014160156,\n                59.32130175834495\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Gamla stan\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.0655574798584,\n                59.32688488286961\n              ],\n              [\n                18.064355850219727,\n                59.32631566510282\n              ],\n              [\n                18.066458702087402,\n                59.324848790762644\n              ],\n              [\n                18.06598663330078,\n                59.32403869869185\n              ],\n              [\n                18.066029548645016,\n                59.323425643208566\n              ],\n              [\n                18.06778907775879,\n                59.322418456622536\n              ],\n              [\n                18.068561553955078,\n                59.322681203826725\n              ],\n              [\n                18.069376945495605,\n                59.32239656093052\n              ],\n              [\n                18.071136474609375,\n                59.32244035230048\n              ],\n              [\n                18.07203769683838,\n                59.321936748139585\n              ],\n              [\n                18.071908950805664,\n                59.32165209900893\n              ],\n              [\n                18.073883056640625,\n                59.32127986193354\n              ],\n              [\n                18.075814247131344,\n                59.32276878577677\n              ],\n              [\n                18.076844215393066,\n                59.325330457975326\n              ],\n              [\n                18.07504177093506,\n                59.327016239461834\n              ],\n              [\n                18.073325157165527,\n                59.32813274999598\n              ],\n              [\n                18.072595596313477,\n                59.32817653397532\n              ],\n              [\n                18.068432807922363,\n                59.32692866845676\n              ],\n              [\n                18.0655574798584,\n                59.32688488286961\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Östermalmstorg\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.07626485824585,\n                59.34035723468197\n              ],\n              [\n                18.073153495788574,\n                59.336669558957205\n              ],\n              [\n                18.072316646575928,\n                59.336198995864876\n              ],\n              [\n                18.075942993164062,\n                59.33303620502448\n              ],\n              [\n                18.079397678375244,\n                59.33216063995291\n              ],\n              [\n                18.084547519683838,\n                59.338683057637816\n              ],\n              [\n                18.07626485824585,\n                59.34035723468197\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Stadion\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.086435794830322,\n                59.33855174614448\n              ],\n              [\n                18.090920448303223,\n                59.34357404914192\n              ],\n              [\n                18.077423572540283,\n                59.34686713878302\n              ],\n              [\n                18.07255268096924,\n                59.34140765657815\n              ],\n              [\n                18.086435794830322,\n                59.33855174614448\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Tekniska högskolan\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.07248830795288,\n                59.341429540022204\n              ],\n              [\n                18.07727336883545,\n                59.34685619881457\n              ],\n              [\n                18.069140911102295,\n                59.348398699577736\n              ],\n              [\n                18.066608905792233,\n                59.3467905589299\n              ],\n              [\n                18.0625319480896,\n                59.3457512438463\n              ],\n              [\n                18.063197135925293,\n                59.345061996301204\n              ],\n              [\n                18.07023525238037,\n                59.341834381193955\n              ],\n              [\n                18.07248830795288,\n                59.341429540022204\n              ]\n            ]\n          ]\n        }\n      },\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Gärdet\"\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                18.090534210205078,\n                59.346626458663074\n              ],\n              [\n                18.092164993286133,\n                59.34371628220315\n              ],\n              [\n                18.099374771118164,\n                59.34238145619174\n              ],\n              [\n                18.104653358459473,\n                59.34404451007099\n              ],\n              [\n                18.105640411376953,\n                59.34789548007956\n              ],\n              [\n                18.097057342529297,\n                59.349952069244786\n              ],\n              [\n                18.090534210205078,\n                59.346626458663074\n              ]\n            ]\n          ]\n        }\n      }\n    ]\n  }\n]\n\nexport default GeojsonData","import geojsonData from \"./GeojsonDB\";\nimport { stations } from \"./Data\";\n\n   export const filterGeojson = (i) => {\n    let geo = geojsonData[0].features.filter(\n      y => y.properties.Name === i\n    );\n    return geo[0];\n   }\n\n   export const filterStations = (i) => {\n    let match = stations.filter(station => station.Name === i);\n\n    return match[0]\n   }","/* eslint-disable max-len */\nimport React from 'react'\n\nconst Icon = ({ color = '#000', size , type, }) => {\n  switch (type) {\n    case 'gps-icon':\n      return (\n        <svg  style={{cursor:'pointer'}} height={size} viewBox=\"-66 0 512 512.001\" width={size} xmlns=\"http://www.w3.org/2000/svg\" fill={color}>\n        <path d=\"m190.390625 103.976562c-47.648437 0-86.414063 38.765626-86.414063 86.410157 0 47.648437 38.765626 86.414062 86.414063 86.414062s86.410156-38.765625 86.410156-86.414062c0-47.644531-38.765625-86.410157-86.410156-86.410157zm0 0\" />\n        <path d=\"m191.167969.00390625-.800781-.00390625c-104.96875 0-190.367188 85.40625-190.367188 190.386719 0 57.554687 29.417969 102.445312 62.195312 147.148437l127.917969 174.464844s120.90625-164.148438 128.46875-174.460938c32.777344-44.703124 62.195313-89.59375 62.195313-147.148437 0-104.722656-84.980469-189.972656-189.609375-190.38671875zm-.777344 306.78906275c-64.1875 0-116.40625-52.21875-116.40625-116.40625 0-64.183594 52.21875-116.402344 116.40625-116.402344s116.40625 52.21875 116.40625 116.402344c0 64.1875-52.222656 116.40625-116.40625 116.40625zm0 0\"/>\n        </svg>\n      )\n      default:\n        return null\n  }\n}\n\nexport default Icon\n\n\n","import React, { useState } from \"react\";\nimport ReactMapGL, { Marker, Source, Layer } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Search from \"./Components/search\";\nimport { filterGeojson, filterStations } from './script' \nimport { stations } from \"./Data\";\n\n\nimport Icon from \"./assets/icons\";\n\nconst App = () => {\n  const [area, setArea] = useState(\"\");\n  const [match, setMatch] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [geojson, setGeojson] = useState(null);\n  const [viewport, setViewport] = useState({\n    width: \"100vw\",\n    height: \"100vh\",\n    latitude: 59.329323,\n    longitude: 18.068581,\n    zoom: 12.6\n  });\n  \n\n  const findstation = e => {\n    if (e.target.value === \"\") {\n      console.log(\"null\");\n    } else {\n      setLoading(true);\n      setTimeout(() => {\n        const { Name, X, Y } = filterStations(e.target.value)\n        setMatch(filterStations(e.target.value))\n        setArea(Name);\n        setGeojson(filterGeojson(Name))\n\n        \n        setViewport({\n          width: \"100vw\",\n          height: \"100vh\",\n          latitude: Y,\n          longitude: X,\n          zoom: 14\n        });\n        setLoading(false);\n      }, 2000);\n    }\n  };\n\n  const clickedStation = (i) => {\n    setLoading(true);\n    setTimeout(() => {\n      setGeojson(filterGeojson(i.Name))\n      setMatch(filterStations(i.Name))\n      setArea(i.Name)\n      setViewport({\n        width: \"100vw\",\n        height: \"100vh\",\n        latitude: i.Y,\n        longitude: i.X,\n        zoom: 14\n      });\n      setLoading(false);\n    }, 2000);\n\n \n  };\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", position: \"relative\" }}>\n      <Search findstation={findstation} area={area} match={match} loading={loading} />\n      <ReactMapGL\n        mapboxApiAccessToken=\"pk.eyJ1Ijoid2lsbGlhbWluc3VyZWx5IiwiYSI6ImNrN2xvejhwMzA2eWEzbW1rOG5jbjl4amUifQ.7Gf8x82h2ss94p3u0igG0w\"\n        mapStyle=\"mapbox://styles/mapbox/outdoors-v11\"\n        // mapbox://styles/mapbox/outdoors-v11\n        // mapbox://styles/williaminsurely/ck7nc5lw30zjd1jrx38nluek9\n        {...viewport}\n        onViewportChange={setViewport}>\n        <Source id=\"oregonjson\" type=\"geojson\" data={geojson} />\n\n        <Layer\n          id=\"areas\"\n          type=\"fill\"\n          source=\"oregonjson\"\n          paint={{\n            \"fill-color\": \"#152946\",\n            \"fill-opacity\": 0.2\n          }}\n        />\n\n        {stations.map(i => {\n          return (\n            <Marker key={i.Name} value={i.Name} latitude={i.Y} longitude={i.X}>\n              <div style={{ cursor: \"pointer\" }} onClick={() => clickedStation(i)}>\n                <Icon type=\"gps-icon\" size={i.Name === match.Name ? '40px' : '26px'} color={i.Name === match.Name ? '#156258' : '#152946'} />\n              </div>\n            </Marker>\n          );\n        })}\n      </ReactMapGL>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}